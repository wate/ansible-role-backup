---
- name: Set setting variables
  ansible.builtin.set_fact:
    backup_setting_name: "{{ backup_cfg.key }}"
    backup_setting: "{{ backup_cfg.value }}"
- name: Create backup data directory:{{ backup_setting_name }}
  ansible.builtin.file:
    path: "{{ backup_data_dir }}/{{ backup_setting_name }}"
    state: directory
    owner: "{{ backup_setting.user }}"
    group: "{{ backup_setting.group | default(omit) }}"
    mode: "0750"
- name: restic setting:{{ backup_setting_name }}
  when: backup_setting.restic is defined
  block:
    - name: Set setting variables
      ansible.builtin.set_fact:
        restic_repo_type: "{{ backup_setting.restic.repo_type | default(backup_restic_default_repo_type) }}"
        restic_repo: "{{ backup_setting.restic.repo | default(backup_repo_dir + '/' + backup_setting_name) }}"
        restic_forget_keep_type: "{{ backup_setting.restic.forget_keep_type | default(backup_restic_default_forget_keep_type) }}"
    - name: Assert restic setting:{{ backup_setting_name }}
      ansible.builtin.assert:
        that:
          - restic_repo_type in restic_allow_repo_types
          - restic_forget_keep_type in restic_allow_forget_keep_types
        quiet: true
    - name: Assert restic repository password:{{ backup_setting_name }}
      ansible.builtin.assert:
        that:
          - backup_setting.restic.repo_password is defined
          - backup_setting.restic.repo_password | length >= 8
        quiet: true
    - name: Create backup repository directory:{{ backup_setting_name }}
      ansible.builtin.file:
        path: "{{ restic_repo }}"
        state: directory
        owner: "{{ backup_setting.user }}"
        group: "{{ backup_setting.group | default(omit) }}"
        mode: "0750"
      when: restic_repo_type == 'local'
    - name: Create/update repository password file
      ansible.builtin.template:
        src: password_file.j2
        dest: "{{ backup_repo_password_dir }}/{{ backup_setting_name }}"
        owner: "{{ backup_setting.user }}"
        group: "{{ backup_setting.group | default(omit) }}"
        mode: "0640"
      register: password_file_result
      vars:
        restic_repo_password: "{{ backup_setting.restic.repo_password }}"
    - name: Set repository password
      ansible.builtin.command:
        cmd: restic key passwd
        removes: "{{ restic_repo }}/config"
      environment:
        RESTIC_REPOSITORY: "{{ restic_repo }}"
        RESTIC_PASSWORD_FILE: "{{ backup_repo_password_dir }}/{{ backup_setting_name }}"
      when:
        - restic_repo_type == 'local'
        - password_file_result is changed
- name: Create/update rclone setting:{{ backup_setting_name }}
  when: backup_setting.rclone is defined
  become: true
  become_user: "{{ backup_setting.user }}"
  block:
    - name: Create rclone config directory:{{ backup_setting_name }}
      ansible.builtin.file:
        path: ~/.config/rclone
        state: directory
        mode: "0755"
    - name: Create/update rclone setting:{{ backup_setting_name }}
      ansible.builtin.blockinfile:
        path: ~/.config/rclone/rclone.conf
        content: |
          {% for rclone_cfg in backup_setting.rclone | dict2items %}
          [{{ rclone_cfg.key }}]
          {% for option_name, option_value in rclone_cfg.value.items() %}
          {{ option_name }} = {{ option_value }}
          {% endfor %}
          {% endfor %}
        mode: "0600"
        create: true
- name: Generate/update backup script:{{ backup_setting_name }}
  ansible.builtin.template:
    src: backup.sh.j2
    dest: "{{ backup_script_dir }}/{{ backup_setting_name }}"
    owner: "{{ backup_setting.user }}"
    group: "{{ backup_setting.group | default(omit) }}"
    mode: "0700"
- name: Set backup cron jobs:{{ backup_setting_name }}
  ansible.builtin.cron:
    user: "{{ backup_setting.user }}"
    name: role:backup/setting:{{ backup_setting_name }}
    job: "{{ backup_script_dir }}/{{ backup_setting_name }}"
    month: "{{ backup_setting.cron.month | default(omit) }}"
    day: "{{ backup_setting.cron.day | default(omit) }}"
    hour: "{{ backup_setting.cron.hour | default(omit) }}"
    minute: "{{ backup_setting.cron.minute | default(omit) }}"
    weekday: "{{ backup_setting.cron.weekday | default(omit) }}"
    disabled: "{{ backup_setting.cron.disabled | default(false) }}"
  when: backup_setting.cron is defined
