# code: language=ansible
---
- name: Verify
  hosts: all
  gather_facts: false
  become: true
  vars:
    backup_base_dir: /backup
    backup_script_dir: "{{ backup_base_dir }}/script"
    backup_data_dir: "{{ backup_base_dir }}/data"
    backup_repo_dir: "{{ backup_base_dir }}/repo"
  tasks:
    ## テストの前処理
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
    - name: Gather service facts
      ansible.builtin.service_facts:
    - name: Gather facts on listening ports
      community.general.listen_ports_facts:
        command: ss
      become: true
    - name: Set assert variables
      ansible.builtin.set_fact:
        listen_tcp_posts: "{{ ansible_facts.tcp_listen | map(attribute='port') | unique | sort | list }}"
        listen_udp_posts: "{{ ansible_facts.udp_listen | map(attribute='port') | unique | sort | list }}"
    - name: Assert packages
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['rclone'] is defined
          - ansible_facts.packages['restic'] is defined
    - name: Test command undefined
      become: true
      become_user: command_undefined
      block:
        - name: Check backup script:test_command_undefined
          ansible.builtin.stat:
            path: "{{ backup_script_dir }}/test_command_undefined"
          register: backup_script_result
        - name: Assert backup script:test_command_undefined
          ansible.builtin.assert:
            that:
              - backup_script_result.stat.exists
              - backup_script_result.stat.isreg
              - backup_script_result.stat.pw_name == 'command_undefined'
              - backup_script_result.stat.executable
        - name: Check backup data directory:test_command_undefined
          ansible.builtin.stat:
            path: "{{ backup_data_dir }}/test_command_undefined"
          register: backup_data_dir_result
        - name: Assert backup dir:test_command_undefined
          ansible.builtin.assert:
            that:
              - backup_data_dir_result.stat.exists
              - backup_data_dir_result.stat.isdir
              - backup_data_dir_result.stat.writeable
              - backup_data_dir_result.stat.pw_name == 'command_undefined'
        - name: Check backup command section:test_command_undefined
          ansible.builtin.command:
            cmd: grep "## バックアップ処理" "{{ backup_script_dir }}/test_command_undefined"
          failed_when: backup_command_result.rc > 1
          changed_when: false
          register: backup_command_result
        - name: Assert backup command section:test_command_undefined
          ansible.builtin.assert:
            that: backup_command_result.rc == 1
    - name: Test command only
      become: true
      become_user: command_only
      block:
        - name: Check backup script:test_command_only
          ansible.builtin.stat:
            path: "{{ backup_script_dir }}/test_command_only"
          register: backup_script_result
        - name: Assert backup script:test_command_only
          ansible.builtin.assert:
            that:
              - backup_script_result.stat.exists
              - backup_script_result.stat.isreg
              - backup_script_result.stat.pw_name == 'command_only'
              - backup_script_result.stat.executable
        - name: Check backup data directory:test_command_only
          ansible.builtin.stat:
            path: "{{ backup_data_dir }}/test_command_only"
          register: backup_data_dir_result
        - name: Assert backup dir:test_command_only
          ansible.builtin.assert:
            that:
              - backup_data_dir_result.stat.exists
              - backup_data_dir_result.stat.isdir
              - backup_data_dir_result.stat.writeable
              - backup_data_dir_result.stat.pw_name == 'command_only'
        - name: Check backup command section:test_command_only
          ansible.builtin.command:
            cmd: grep "echo test_command_only >" "{{ backup_script_dir }}/test_command_only"
          failed_when: backup_command_result.rc > 1
          changed_when: false
          register: backup_command_result
        - name: Assert backup command:test_command_only
          ansible.builtin.assert:
            that: backup_command_result.rc == 0
    - name: Test restic default
      become: true
      become_user: restic_default
      block:
        - name: Check backup script:test_restic_default
          ansible.builtin.stat:
            path: "{{ backup_script_dir }}/test_restic_default"
          register: backup_script_result
        - name: Assert backup script:test_restic_default
          ansible.builtin.assert:
            that:
              - backup_script_result.stat.exists
              - backup_script_result.stat.isreg
              - backup_script_result.stat.pw_name == 'restic_default'
              - backup_script_result.stat.executable
        - name: Check backup data directory:test_restic_default
          ansible.builtin.stat:
            path: "{{ backup_data_dir }}/test_restic_default"
          register: backup_data_dir_result
        - name: Assert backup dir:test_restic_default
          ansible.builtin.assert:
            that:
              - backup_data_dir_result.stat.exists
              - backup_data_dir_result.stat.isdir
              - backup_data_dir_result.stat.writeable
              - backup_data_dir_result.stat.pw_name == 'restic_default'
        - name: Check backup command section:test_restic_default
          ansible.builtin.command:
            cmd: grep "echo test_restic_default >" "{{ backup_script_dir }}/test_restic_default"
          failed_when: backup_command_result.rc > 1
          changed_when: false
          register: backup_command_result
        - name: Assert backup command:test_restic_default
          ansible.builtin.assert:
            that: backup_command_result.rc == 0
    - name: Test restic forget keep param
      become: true
      become_user: restic_forget_keep_param
      block:
        - name: Check backup script:test_restic_forget_keep_param
          ansible.builtin.stat:
            path: "{{ backup_script_dir }}/test_restic_forget_keep_param"
          register: backup_script_result
        - name: Assert backup script:test_restic_forget_keep_param
          ansible.builtin.assert:
            that:
              - backup_script_result.stat.exists
              - backup_script_result.stat.isreg
              - backup_script_result.stat.pw_name == 'restic_forget_keep_param'
              - backup_script_result.stat.executable
        - name: Check backup data directory:test_restic_forget_keep_param
          ansible.builtin.stat:
            path: "{{ backup_data_dir }}/test_restic_forget_keep_param"
          register: backup_data_dir_result
        - name: Assert backup dir:test_restic_forget_keep_param
          ansible.builtin.assert:
            that:
              - backup_data_dir_result.stat.exists
              - backup_data_dir_result.stat.isdir
              - backup_data_dir_result.stat.writeable
              - backup_data_dir_result.stat.pw_name == 'restic_forget_keep_param'
        - name: Check backup command section:test_restic_forget_keep_param
          ansible.builtin.command:
            cmd: grep "echo test_restic_forget_keep_param >" "{{ backup_script_dir }}/test_restic_forget_keep_param"
          failed_when: backup_command_result.rc > 1
          changed_when: false
          register: backup_command_result
        - name: Assert backup command:test_restic_forget_keep_param
          ansible.builtin.assert:
            that: backup_command_result.rc == 0
        - name: Check restic forget command:test_restic_forget_keep_param
          ansible.builtin.command:
            cmd: grep "restic forget --prune --keep-last 5" "{{ backup_script_dir }}/test_restic_forget_keep_param"
          failed_when: restic_forget_command_result.rc > 1
          changed_when: false
          register: restic_forget_command_result
        - name: Assert restic forget command:test_restic_forget_keep_param
          ansible.builtin.assert:
            that: restic_forget_command_result.rc == 0
    - name: Test restic and rclone
      become: true
      become_user: restic_and_rclone
      block:
        - name: Check backup script:test_restic_and_rclone
          ansible.builtin.stat:
            path: "{{ backup_script_dir }}/test_restic_and_rclone"
          register: backup_script_result
        - name: Assert backup script:test_restic_and_rclone
          ansible.builtin.assert:
            that:
              - backup_script_result.stat.exists
              - backup_script_result.stat.isreg
              - backup_script_result.stat.pw_name == 'restic_and_rclone'
              - backup_script_result.stat.executable
        - name: Check backup data directory:test_restic_and_rclone
          ansible.builtin.stat:
            path: "{{ backup_data_dir }}/test_restic_and_rclone"
          register: backup_data_dir_result
        - name: Assert backup dir:test_restic_and_rclone
          ansible.builtin.assert:
            that:
              - backup_data_dir_result.stat.exists
              - backup_data_dir_result.stat.isdir
              - backup_data_dir_result.stat.writeable
              - backup_data_dir_result.stat.pw_name == 'restic_and_rclone'
        - name: Check backup command section:test_restic_and_rclone
          ansible.builtin.command:
            cmd: grep "echo test_restic_and_rclone >" "{{ backup_script_dir }}/test_restic_and_rclone"
          failed_when: backup_command_result.rc > 1
          changed_when: false
          register: backup_command_result
        - name: Assert backup command:test_restic_and_rclone
          ansible.builtin.assert:
            that: backup_command_result.rc == 0
        - name: Test rclone config
          block:
            - name: Check ~/.config/rclone/rclone.conf:test_restic_and_rclone
              ansible.builtin.stat:
                path: ~/.config/rclone/rclone.conf
              register: rclone_conf_result
            - name: Assert ~/.config/rclone/rclone.conf:test_restic_and_rclone
              ansible.builtin.assert:
                that:
                  - rclone_conf_result.stat.exists
                  - rclone_conf_result.stat.isreg
                  - rclone_conf_result.stat.mode == '0600'
                  - rclone_conf_result.stat.pw_name == 'restic_and_rclone'
            - name: Check rclone config section:test_restic_and_rclone
              ansible.builtin.command:
                cmd: grep "[cloudflare_r2]" ~/.config/rclone/rclone.conf
              failed_when: rclone_config_section_result.rc > 1
              changed_when: false
              register: rclone_config_section_result
            - name: Assert rclone config section:test_restic_and_rclone
              ansible.builtin.assert:
                that: rclone_config_section_result.rc == 0
            - name: Check rclone config access_key_id:test_restic_and_rclone
              ansible.builtin.command:
                cmd: grep "access_key_id = {{ lookup('env', 'CLOUDFLARE_R2_ACCESS_KEY_ID') }}" ~/.config/rclone/rclone.conf
              failed_when: rclone_config_access_key_id_result.rc > 1
              changed_when: false
              register: rclone_config_access_key_id_result
            - name: Assert rclone config access_key_id:test_restic_and_rclone
              ansible.builtin.assert:
                that: rclone_config_access_key_id_result.rc == 0
            - name: Check rclone config secret_access_key:test_restic_and_rclone
              ansible.builtin.command:
                cmd: grep "secret_access_key = {{ lookup('env', 'CLOUDFLARE_R2_SECRET_ACCESS_KEY') }}" ~/.config/rclone/rclone.conf
              failed_when: rclone_config_secret_access_key_result.rc > 1
              changed_when: false
              register: rclone_config_secret_access_key_result
            - name: Assert rclone config secret_access_key:test_restic_and_rclone
              ansible.builtin.assert:
                that: rclone_config_secret_access_key_result.rc == 0
            - name: Check rclone config endpoint:test_restic_and_rclone
              ansible.builtin.command:
                cmd: grep "endpoint = {{ lookup('env', 'rclone_config_endpoint') }}" ~/.config/rclone/rclone.conf
              failed_when: rclone_config_endpoint.rc > 1
              changed_when: false
              register: rclone_config_endpoint
            - name: Assert rclone config endpoint:test_restic_and_rclone
              ansible.builtin.assert:
                that: rclone_config_endpoint.rc == 0
